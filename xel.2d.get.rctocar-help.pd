#N canvas 720 204 469 459 10;
#X obj 6 7 xel.header xel.2d.get.rctocar;
#X obj 6 404 xel.footer;
#X obj 9 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 9 229 unpack f f;
#X obj 9 251 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 2 256;
#X obj 66 251 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 4 256;
#X obj 20 181 nbx 5 14 0 1e+37 0 0 empty empty empty 0 -8 0 10 -262144
-1 -1 14 256;
#X text 27 134 Outputs;
#X text 17 163 Linear Index;
#X obj 150 161 nbx 5 14 0 1e+37 0 0 empty empty empty 0 -8 0 10 -262144
-1 -1 3 256;
#X text 147 143 Number of Rows;
#X obj 150 180 pack f f, f 17;
#X obj 249 161 nbx 5 14 0 1e+37 0 0 empty empty empty 0 -8 0 10 -262144
-1 -1 5 256;
#X text 148 126 Matrix Size;
#X text 246 143 Number of Columns;
#X obj 9 109 loadbang;
#X obj 9 270 pack f f, f 10;
#X obj 9 207 xel.2d.get.itorc 3 5 8;
#X obj 9 314 unpack f f;
#X obj 9 336 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 1 256;
#X obj 66 336 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 -1 256;
#X obj 9 292 xel.2d.get.rctocar 3 5 1 3;
#X text 4 31 The abstraction maps the row and column indices to cartesian
coordinates given a matrix size. The arguments are facultative and
can be the size of the matrix - the number of rows and the number of
columns - and the row and column's indices., f 67;
#X connect 2 0 17 0;
#X connect 3 0 4 0;
#X connect 3 1 5 0;
#X connect 4 0 16 0;
#X connect 5 0 16 1;
#X connect 6 0 17 0;
#X connect 9 0 11 0;
#X connect 11 0 17 1;
#X connect 11 0 21 1;
#X connect 12 0 11 1;
#X connect 15 0 2 0;
#X connect 16 0 21 0;
#X connect 17 0 3 0;
#X connect 18 0 19 0;
#X connect 18 1 20 0;
#X connect 21 0 18 0;
